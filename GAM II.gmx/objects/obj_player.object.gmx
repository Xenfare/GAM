<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp = obj_controller.playerMaxHP;
scr_setplayersprite();

image_speed = 0;
xspd = 0;
yspd = 0;

blinkDistance = 0;
maxBlinkDistance = 30;

terminalVelocity = 11;

blinkTimer = 30;
jumpSpeed = 4;
moveSpeed = 2
gravStrength = .5;
jumps = 0;
directionFacing = 1;
knockback = 0;
invulnerable = false;
dropSpeed = 0;
hurtIndex = 0;

preBlinkX = 0;
postBlinkX = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>repeat(8) with instance_create(x, y, obj_particle)
{
    image_blend = c_red;
    timer = 16;
}

instance_create(0, -48, obj_youdied);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invulnerable = false;
hurtIndex = 0;
scr_setplayersprite();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Room Swap

if (x &gt; 120)
{
    room_goto(obj_controller.rightroom);
    x = 0;
    exit;
}

if (x &lt; 0) 
{
    room_goto(obj_controller.leftroom);
    x = 120;
    exit;
}

if (y &gt; 88)
{
    room_goto(obj_controller.downroom);
    y = 0;
    exit;
}

if (y &lt; 0)
{
    room_goto(obj_controller.uproom);
    y = 88;
    exit;
}

//Blink Code

if (obj_input.keys[INPUT.BLINK] &amp;&amp; obj_controller.blink = true)
{
    blinkDistance++;
    if (blinkDistance &gt; maxBlinkDistance)
    {
        blinkDistance = maxBlinkDistance;
    }
}

if (!obj_input.keys[INPUT.BLINK] &amp;&amp; blinkDistance != 0) 
{
    preBlinkX = x;
    instance_create(x, y, obj_shine);
    blinkDistance *= directionFacing;
    blinkDistance = round(blinkDistance);
    for(i = blinkDistance; i != 0; i -= sign(blinkDistance))
    {
        if place_free(x + i, y) &amp;&amp; x + i &gt; -2 &amp;&amp; x + i &lt; room_width + 2
        {
            x += sign(blinkDistance);
        }
    }
    
    blinkDistance = 0;
    if (alarm[1] &lt; 6) 
    {
        alarm[1] = 6;
        invulnerable = true;
    }
    
    //Blink Strike &amp;&amp; Invulnerability Code
    
    if (obj_controller.blinkStrike = true &amp;&amp; abs(preBlinkX - x) &gt; 8)
    {
        with instance_create((x + preBlinkX) / 2, y, obj_blinkslash) {image_xscale = (other.preBlinkX - other.x) / 8}
        with instance_create(x, y, obj_blinkspike) {image_xscale = (other.preBlinkX - other.x) / 16}
    }
    else
    {
        with instance_create((x + preBlinkX) / 2, y, obj_blinktrail) {image_xscale = (other.preBlinkX - other.x) / 8}
    }
}

//Movement Code

if (directionFacing = -1)
{
    image_index = 1;
}
else if (directionFacing = 1)
{
    image_index = 0;
}

if (obj_input.keys[INPUT.DOWN] &amp;&amp; place_meeting(x, y+1, obj_wall))
{
    image_index += 2;
}

if (obj_input.keys[INPUT.RIGHT]) 
{
    image_index = 0;
    xspd = moveSpeed;
}
else if (obj_input.keys[INPUT.LEFT]) 
{
    image_index = 1;
    xspd = -moveSpeed;
}
else
{
    xspd = 0;
}

//Double Jump

if (obj_input.keys[INPUT.JUMP] &amp;&amp; !place_free(x, y+1))
{
    yspd = -jumpSpeed;
}
else if (obj_input.keys[INPUT.JUMP] = 2 &amp;&amp; obj_controller.doubleJump == true &amp;&amp; jumps &gt; 0)
{
    instance_create(x, y, obj_shine);
    yspd = -jumpSpeed;
    jumps--;
} 

if (!place_free(x, y-1) &amp;&amp; !place_free(x, y+1) &amp;&amp; yspd &lt; 0)
{
    yspd = 0;
}

if (place_free(x, y+1))
{
    if (yspd &lt; terminalVelocity)
    {
        yspd += gravStrength;
    }
}
else
{
    if (yspd &gt; 0)
    {
        yspd = 0;
    }
    
    if (obj_controller.doubleJump = true)
    {
        jumps = 1;
    }
}

if (knockback != 0)
{
    knockback = knockback
    knockback -= sign(knockback);
}

//Actually Moving the Player

if (xspd + knockback != 0)
{
    var totalxspd = xspd + knockback;
    for(i = 1; i &lt;= 10; ++i)
        if !place_free(round(x + (i / 10) * totalxspd), round(y))
            break;
    x += --i / 10 * totalxspd
}

if (yspd != 0)
{
    for(i = 1; i &lt;= 10; ++i)
        if !place_free(round(x), round(y + (i / 10) * yspd))
            break
     y += --i / 10 * yspd;
}

//Damage Code

if (alarm[1] &gt; 60)
{
    if (alarm[1] mod 8 == 0)
    {
        scr_setplayersprite();
        hurtIndex = 4;
    }
    
    if (alarm[1] mod 8 == 4)
    {
        hurtIndex = 0;
        sprite_index = spr_playershape;
    }
}
else
{
    if (alarm[1] mod 12 == 0)
    {
        scr_setplayersprite();
        hurtIndex = 0;
    }
    
    if (alarm[1] mod 12 == 6)
    {
        sprite_index = spr_playershape;
    }
}

//Directional Animation

if (image_index == 0)
{
    directionFacing = 1;
}
if (image_index == 1)
{
    directionFacing = -1
}

x = round(x);
y = round(y);

//show_debug_message(yspd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index, image_index + hurtIndex, round(x), round(y));

draw_set_blend_mode(bm_add);

if (blinkDistance &gt; 0)
{
    draw_sprite_ext(spr_particle, 0, x + (blinkDistance * directionFacing), y, 1, 1, 0, c_red, 0.5);

    drawPoint = x;
    {
        for(i = blinkDistance * directionFacing; i != 0; i -= sign(blinkDistance * directionFacing))
        {
            if place_free(drawPoint + i, y) &amp;&amp; drawPoint + i &gt; -2 &amp;&amp; drawPoint + i &lt; room_width + 2
            {
                drawPoint += sign(blinkDistance * directionFacing);
            }
        }
    }
    draw_sprite_ext(spr_particle, 0, drawPoint, y, 1, 1, 0, c_blue, 0.5);
}

draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
